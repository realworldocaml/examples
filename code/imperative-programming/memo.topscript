#silent true;;
#use "topfind";;
#thread;;
#camlp4o;;
#require "core";;
#require "core.top";;
#require "ppx_jane";;
#silent false;;
open Core_kernel;;
[@@@part "1"];;
let memoize f =
  let memo_table = Hashtbl.Poly.create () in
  (fun x ->
     Hashtbl.find_or_add memo_table x ~default:(fun () -> f x))
;;
[%%expect ocaml {|val memoize : ('a -> 'b) -> 'a -> 'b = <fun>|}];;
[@@@part "2"];;
let rec edit_distance s t =
  match String.length s, String.length t with
  | (0,x) | (x,0) -> x
  | (len_s,len_t) ->
    let s' = String.drop_suffix s 1 in
    let t' = String.drop_suffix t 1 in
    let cost_to_drop_both =
      if s.[len_s - 1] = t.[len_t - 1] then 0 else 1
    in
    List.reduce_exn ~f:Int.min
      [ edit_distance s' t  + 1
      ; edit_distance s  t' + 1
      ; edit_distance s' t' + cost_to_drop_both
      ]
;;
[%%expect ocaml {|val edit_distance : string -> string -> int = <fun>|}];;
edit_distance "OCaml" "ocaml";;
[%%expect ocaml {|- : int = 2|}];;
[@@@part "3"];;
#require "mtime.clock.os";;
[%%expect{|No such package: mtime.os.top|}];;
let time f =
  let counter = Mtime_clock.counter () in
  let x = f () in
  let elapsed = Mtime_clock.count counter in
  printf "Time: %F ms\n" (Mtime.Span.to_ms elapsed);
  x 
;;
[%%expect{|
Characters 29-42:
Error: Unbound module Mtime
Hint: Did you mean Time?
|}];;
[@@@part "4"];;
time (fun () -> edit_distance "OCaml" "ocaml");;
[%%expect{|
Characters 0-4:
Error: Unbound value time
|}];;
time (fun () -> edit_distance "OCaml 4.01" "ocaml 4.01");;
[%%expect{|
Characters 0-4:
Error: Unbound value time
|}];;
[@@@part "5"];;
let memo_rec f_norec x =
  let fref = ref (fun _ -> assert false) in
  let f = memoize (fun x -> f_norec !fref x) in
  fref := f;
  f x
;;
[%%expect ocaml {|val memo_rec : (('a -> 'b) -> 'a -> 'b) -> 'a -> 'b = <fun>|}];;
[@@@part "6"];;
let edit_distance = memo_rec (fun edit_distance (s,t) ->
  match String.length s, String.length t with
  | (0,x) | (x,0) -> x
  | (len_s,len_t) ->
    let s' = String.drop_suffix s 1 in
    let t' = String.drop_suffix t 1 in
    let cost_to_drop_both =
      if s.[len_s - 1] = t.[len_t - 1] then 0 else 1
    in
    List.reduce_exn ~f:Int.min
      [ edit_distance (s',t ) + 1
      ; edit_distance (s ,t') + 1
      ; edit_distance (s',t') + cost_to_drop_both
      ]) ;;
[%%expect ocaml {|val edit_distance : string * string -> int = <fun>|}];;
[@@@part "7"];;
time (fun () -> edit_distance ("OCaml 4.01","ocaml 4.01"));;
[%%expect{|
Characters 0-4:
Error: Unbound value time
|}];;
