let x = 3;;
let y = 4;;
let z = x + y;;
#part 1
let languages = "OCaml,Perl,C++,C";;
let dashed_languages =
    let language_list = String.split languages ~on:',' in
    String.concat ~sep:"-" language_list
  ;;
#part 2
language_list;;
#part 3
let languages = "OCaml,Perl,C++,C";;
let dashed_languages =
     let languages = String.split languages ~on:',' in
     String.concat ~sep:"-" languages
  ;;
#part 4
languages;;
#part 5
let area_of_ring inner_radius outer_radius =
     let pi = acos (-1.) in
     let area_of_circle r = pi *. r *. r in
     area_of_circle outer_radius -. area_of_circle inner_radius
  ;;
area_of_ring 1. 3.;;
#part 6
let area_of_ring inner_radius outer_radius =
     let pi = acos (-1.) in
     let area_of_circle r = pi *. r *. r in
     let pi = 0. in
     area_of_circle outer_radius -. area_of_circle inner_radius
  ;;
#part 7
let (ints,strings) = List.unzip [(1,"one"); (2,"two"); (3,"three")];;
#part 8
let upcase_first_entry line =
     let (first :: rest) = String.split ~on:',' line in
     String.concat ~sep:"," (String.uppercase first :: rest)
  ;;
#part 9
let upcase_first_entry line =
     match String.split ~on:',' line with
     | [] -> assert false (* String.split returns at least one element *)
     | first :: rest -> String.concat ~sep:"," (String.uppercase first :: rest)
  ;;
#part 10
(fun x -> x + 1);;
#part 11
(fun x -> x + 1) 7;;
#part 12
List.map ~f:(fun x -> x + 1) [1;2;3];;
#part 13
let increments = [ (fun x -> x + 1); (fun x -> x + 2) ] ;;
List.map ~f:(fun g -> g 5) increments;;
#part 14
let plusone = (fun x -> x + 1);;
plusone 3;;
#part 15
let plusone x = x + 1;;
#part 16
(fun x -> x + 1) 7;;
let x = 7 in x + 1;;
#part 17
let abs_diff x y = abs (x - y);;
abs_diff 3 4;;
#part 18
let abs_diff =
    (fun x -> (fun y -> abs (x - y)));;
#part 19
let dist_from_3 = abs_diff 3;;
dist_from_3 8;;
dist_from_3 (-1);;
#part 20
let abs_diff = (fun x y -> abs (x - y));;
#part 21
let abs_diff (x,y) = abs (x - y);;
abs_diff (3,4);;
#part 22
let rec find_first_stutter list =
    match list with
    | [] | [_] ->
      (* only zero or one elements, so no repeats *)
      None
    | x :: y :: tl ->
      if x = y then Some x else find_first_stutter (y::tl)
   ;;
#part 23
let rec is_even x =
    if x = 0 then true else is_odd (x - 1)
  and is_odd x =
    if x = 0 then false else is_even (x - 1)
 ;;
List.map ~f:is_even [0;1;2;3;4;5];;
List.map ~f:is_odd [0;1;2;3;4;5];;
#part 24
Int.max 3 4  (* prefix *);;
3 + 4        (* infix  *);;
#part 25
(+) 3 4;;
List.map ~f:((+) 3) [4;5;6];;
#part 26
let (+!) (x1,y1) (x2,y2) = (x1 + x2, y1 + y2);;
(3,2) +! (-2,4);;
#part 27
let (***) x y = (x ** y) ** y;;
#part 28
let ( *** ) x y = (x ** y) ** y;;
#part 29
Int.max 3 (-4);;
Int.max 3 -4;;
#part 30
(Int.max 3) - 4;;
#part 31
let (|>) x f = f x ;;
#part 32
let path = "/usr/bin:/usr/local/bin:/bin:/sbin";;
  String.split ~on:':' path
  |> List.dedup ~compare:String.compare
  |> List.iter ~f:print_endline
  ;;
#part 33
  let split_path = String.split ~on:':' path in
  let deduped_path = List.dedup ~compare:String.compare split_path in
  List.iter ~f:print_endline deduped_path
  ;;
#part 34
List.iter ~f:print_endline ["Two"; "lines"];;
#part 35
List.iter ~f:print_endline;;
#part 36
let (^>) x f = f x;;
Sys.getenv_exn "PATH"
  ^> String.split ~on:':'
  ^> List.dedup ~compare:String.compare
  ^> List.iter ~f:print_endline
  ;;
#part 37
let some_or_zero = function
     | Some x -> x
     | None -> 0
  ;;
List.map ~f:some_or_zero [Some 3; None; Some 4];;
#part 38
let some_or_zero num_opt =
    match num_opt with
    | Some x -> x
    | None -> 0
  ;;
#part 39
let some_or_default default = function
     | Some x -> x
     | None -> default
  ;;
some_or_default 3 (Some 5);;
List.map ~f:(some_or_default 100) [Some 3; None; Some 4];;
#part 40
let ratio ~num ~denom = float num /. float denom;;
#part 41
ratio ~num:3 ~denom:10;;
ratio ~denom:10 ~num:3;;
#part 42
let num = 3 in
let denom = 4 in
ratio ~num ~denom;;
#part 43
  String.split ~on:':' path
  |> List.dedup ~compare:String.compare
  |> List.iter ~f:print_endline
  ;;
#part 44
let apply_to_tuple f (first,second) = f ~first ~second;;
#part 45
let apply_to_tuple_2 f (first,second) = f ~second ~first;;
#part 46
let divide ~first ~second = first / second;;
#part 47
apply_to_tuple_2 divide (3,4);;
#part 48
let apply_to_tuple f (first,second) = f ~first ~second;;
apply_to_tuple divide (3,4);;
#part 49
let concat ?sep x y =
     let sep = match sep with None -> "" | Some x -> x in
     x ^ sep ^ y
  ;;
concat "foo" "bar"             (* without the optional argument *);;
concat ~sep:":" "foo" "bar"    (* with the optional argument    *);;
#part 50
let concat ?(sep="") x y = x ^ sep ^ y ;;
#part 51
concat ~sep:":" "foo" "bar" (* provide the optional argument *);;
concat ?sep:(Some ":") "foo" "bar" (* pass an explicit [Some] *);;
#part 52
concat "foo" "bar" (* don't provide the optional argument *);;
concat ?sep:None "foo" "bar" (* explicitly pass `None` *);;
#part 53
let uppercase_concat ?(sep="") a b = concat ~sep (String.uppercase a) b ;;
uppercase_concat "foo" "bar";;
uppercase_concat "foo" "bar" ~sep:":";;
#part 54
let uppercase_concat ?sep a b = concat ?sep (String.uppercase a) b ;;
#part 55
let numeric_deriv ~delta ~x ~y ~f =
    let x' = x +. delta in
    let y' = y +. delta in
    let base = f ~x ~y in
    let dx = (f ~x:x' ~y -. base) /. delta in
    let dy = (f ~x ~y:y' -. base) /. delta in
    (dx,dy)
  ;;
#part 56
let numeric_deriv ~delta ~x ~y ~f =
    let x' = x +. delta in
    let y' = y +. delta in
    let base = f ~x ~y in
    let dx = (f ~y ~x:x' -. base) /. delta in
    let dy = (f ~x ~y:y' -. base) /. delta in
    (dx,dy)
  ;;
#part 57
let numeric_deriv ~delta ~x ~y ~(f: x:float -> y:float -> float) =
    let x' = x +. delta in
    let y' = y +. delta in
    let base = f ~x ~y in
    let dx = (f ~y ~x:x' -. base) /. delta in
    let dy = (f ~x ~y:y' -. base) /. delta in
    (dx,dy)
  ;;
#part 58
let colon_concat = concat ~sep:":";;
colon_concat "a" "b";;
#part 59
let prepend_pound = concat "# ";;
prepend_pound "a BASH comment";;
#part 60
prepend_pound "a BASH comment" ~sep:":";;
#part 61
let concat x ?(sep="") y = x ^ sep ^ y ;;
#part 62
let prepend_pound = concat "# ";;
prepend_pound "a BASH comment";;
prepend_pound "a BASH comment" ~sep:"--- ";;
#part 63
concat "a" "b" ~sep:"=";;
#part 64
let concat x y ?(sep="") = x ^ sep ^ y ;;
#part 65
concat "a" "b";;
#part 66
#part 67
#part 68
#part 69
#part 70
#part 71
#part 72
#part 73
#part 74
#part 75
#part 76
#part 77
#part 78
#part 79
