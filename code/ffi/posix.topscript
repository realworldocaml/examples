#silent true;;
#use "topfind";;
#thread;;
#camlp4o;;
#require "core";;
#require "core.top";;
#require "ppx_jane";;
#silent false;;
[@@@part "0.5"];;
#require "ctypes.foreign" ;;
[%%expect{|
/Users/yminsky/.opam/4.04.2/lib/bytes: added to search path
/Users/yminsky/.opam/4.04.2/lib/integers: added to search path
/Users/yminsky/.opam/4.04.2/lib/integers/integers.cma: loaded
/Users/yminsky/.opam/4.04.2/lib/integers/integer_printers.cma: loaded
/Users/yminsky/.opam/4.04.2/lib/ctypes: added to search path
/Users/yminsky/.opam/4.04.2/lib/ctypes/ctypes.cma: loaded
/Users/yminsky/.opam/4.04.2/lib/ctypes/ctypes-top.cma: loaded
/Users/yminsky/.opam/4.04.2/lib/ctypes/ctypes-foreign-base.cma: loaded
/Users/yminsky/.opam/4.04.2/lib/ctypes/ctypes-foreign-threaded.cma: loaded
|}];;
#require "ctypes.top" ;;
[%%expect{|/Users/yminsky/.opam/4.04.2/lib/ctypes/ctypes-top.cma: loaded|}];;
open Ctypes ;;
open PosixTypes ;;
open Foreign ;;
let time = foreign "time" (ptr time_t @-> returning time_t) ;;
[%%expect ocaml {|val time : time_t Ctypes_static.ptr -> time_t = <fun>|}];;
[@@@part "1"];;
let cur_time = time (from_voidp time_t null) ;;
[%%expect ocaml {|...|}];;
[@@@part "2"];;
let time' () = time (from_voidp time_t null) ;;
[%%expect ocaml {|val time' : unit -> time_t = <fun>|}];;
[@@@part "3"];;
let difftime =
  foreign "difftime" (time_t @-> time_t @-> returning double) ;;
[%%expect ocaml {|val difftime : time_t -> time_t -> float = <fun>|}];;
let t1 =
  time' () in
Unix.sleep 2;
let t2 = time' () in
difftime t2 t1 ;;
[%%expect ocaml {| ... |}];;
[@@@part "4"];;
let ctime = foreign "ctime" (ptr time_t @-> returning string) ;;
[%%expect ocaml {|val ctime : time_t Ctypes_static.ptr -> string = <fun>|}];;
[@@@part "5"];;
ctime (time' ()) ;;
[%%expect{|
Characters 6-16:
Error: This expression has type time_t but an expression was expected of type
         time_t Ctypes_static.ptr = (time_t, [ `C ]) pointer
|}];;
[@@@part "6"];;
let t_ptr = allocate time_t (time' ()) ;;
[%%expect ocaml {|...|}];;
[@@@part "7"];;
ctime t_ptr ;;
[%%expect ocaml {|...|}];;
[@@@part "8"];;
type timeval ;;
[%%expect ocaml {|type timeval|}];;
let timeval : timeval structure typ = structure "timeval" ;;
[%%expect ocaml {|val timeval : timeval structure typ = struct timeval|}];;
[@@@part "9"];;
let tv_sec  = field timeval "tv_sec" long ;;
[%%expect ocaml {|
val tv_sec : (Signed.long, timeval structure) field =
  {Ctypes_static.ftype = long; foffset = 0; fname = "tv_sec"}
|}];;
let tv_usec = field timeval "tv_usec" long ;;
[%%expect ocaml {|
val tv_usec : (Signed.long, timeval structure) field =
  {Ctypes_static.ftype = long; foffset = 8; fname = "tv_usec"}
|}];;
seal timeval ;;
[%%expect ocaml {|- : unit = ()|}];;
[@@@part "10"];;
type timezone ;;
[%%expect ocaml {|type timezone|}];;
let timezone : timezone structure typ = structure "timezone" ;;
[%%expect ocaml {|val timezone : timezone structure typ = struct timezone|}];;
[@@@part "11"];;
let gettimeofday = foreign "gettimeofday" ~check_errno:true
                     (ptr timeval @-> ptr timezone @-> returning int) ;;
[%%expect{|
Characters 97-121:
Error: Unbound value returning_checking_errno
|}];;
[@@@part "12"];;
let gettimeofday' () =
  let tv = make timeval in
  ignore(gettimeofday (addr tv) (from_voidp timezone null));
  let secs = Signed.Long.(to_int (getf tv tv_sec)) in
  let usecs = Signed.Long.(to_int (getf tv tv_usec)) in
  Pervasives.(float secs +. float usecs /. 1000000.0) ;;
[%%expect{|
Characters 59-71:
Error: Unbound value gettimeofday
|}];;
gettimeofday' () ;;
[%%expect{|
Characters 0-13:
Error: Unbound value gettimeofday'
|}];;
