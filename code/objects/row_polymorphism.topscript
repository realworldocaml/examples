type shape = < area : float >;;

type square = < area : float; width : int >;;

let square w = object
  method area = Float.of_int (w * w)
  method width = w
end;;

type circle = < area : float; radius : int >;;

let circle r = object
  method area = 3.14 *. (Float.of_int r) ** 2.0
  method radius = r
end;;

#part 1
let remove_large l =
  List.filter ~f:(fun s -> s#area <= 100.) l;;

#part 2
let squares : < area : float; width : int > list = 
  [square 5; square 15; square 10];;
remove_large squares;;

#part 3
let remove_large (l: < area : float > list) = 
  List.filter ~f:(fun s -> s#area <= 100.) l;;
remove_large (squares :> < area : float > list );;

#part 4
let hlist: < area: float; ..> list = [square 10; circle 30];;

#part 5
let shape_ref: < area: float; ..> ref = ref (square 40);;
shape_ref := circle 20;;

#part 6
let hlist: shape list = [(square 10 :> shape); (circle 30 :> shape)];;
let shape_ref: shape ref = ref (square 40 :> shape);;
shape_ref := (circle 20 :> shape);;
