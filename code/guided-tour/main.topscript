open Core.Std;;
#part 1
3 + 4;;
8 / 3;;
3.5 +. 6.;;
30_000_000 / 300_000;;
sqrt 9.;;
#part 2
let x = 3 + 4;;
let y = x + x;;
#part 3
let x7 = 3 + 4;;
let x_plus_y = x + y;;
let x' = x + 1;;
let _x' = x' + x';;
_x';;
#part 4
let Seven = 3 + 4;;
let 7x = 7;;
let x-plus-y = x + y;;
#part 5
let square x = x * x ;;
square 2;;
square (square 2);;
#part 6
let ratio x y =
     Float.of_int x /. Float.of_int y
  ;;
ratio 4 7;;
#part 7
let sum_if_true test first second =
    (if test first then first else 0)
    + (if test second then second else 0)
  ;;
#part 8
let even x =
    x mod 2 = 0 ;;
sum_if_true even 3 4;;
sum_if_true even 2 4;;
#part 9
let sum_if_true (test : int -> bool) (x : int) (y : int) : int =
     (if test x then x else 0)
     + (if test y then y else 0)
  ;;
#part 10
let first_if_true test x y =
    if test x then x else y
  ;;
#part 11
let long_string s = String.length s > 6;;
first_if_true long_string "short" "loooooong";;
#part 12
let big_number x = x > 3;;
first_if_true big_number 4 3;;
#part 13
first_if_true big_number "short" "loooooong";;
#part 14
let add_potato x =
     x + "potato";;
#part 15
let is_a_multiple x y =
     x mod y = 0 ;;
is_a_multiple 8 2;;
is_a_multiple 8 0;;
#part 16
let a_tuple = (3,"three");;
let another_tuple = (3,"four",5.);;
#part 17
let (x,y) = a_tuple;;
#part 18
x + String.length y;;
#part 19
let distance (x1,y1) (x2,y2) =
    sqrt ((x1 -. x2) ** 2. +. (y1 -. y2) ** 2.)
  ;;
#part 20
let languages = ["OCaml";"Perl";"C"];;
#part 21
let numbers = [3;"four";5];;
#part 22
List.length languages;;
#part 23
List.map languages ~f:String.length;;
#part 24
List.map ~f:String.length languages;;
#part 25
"French" :: "Spanish" :: languages;;
#part 26
languages;;
#part 27
["OCaml", "Perl", "C"];;
#part 28
1,2,3;;
#part 29
[1; 2; 3];;
1 :: (2 :: (3 :: []));;
1 :: 2 :: 3 :: [];;
#part 30
[1;2;3] @ [4;5;6];;
#part 31
let my_favorite_language (my_favorite :: the_rest) =
     my_favorite
  ;;
#part 32
my_favorite_language ["English";"Spanish";"French"];;
my_favorite_language [];;
#part 33
let my_favorite_language languages =
    match languages with
    | first :: the_rest -> first
    | [] -> "OCaml" (* A good default! *)
 ;;
my_favorite_language ["English";"Spanish";"French"];;
my_favorite_language [];;
#part 34
let rec sum l =
    match l with
    | [] -> 0                   (* base case *)
    | hd :: tl -> hd + sum tl   (* inductive case *)
  ;;
sum [1;2;3];;
#part 35
let rec destutter list =
    match list with
    | [] -> []
    | hd1 :: hd2 :: tl ->
      if hd1 = hd2 then destutter (hd2 :: tl)
      else hd1 :: destutter (hd2 :: tl)
  ;;
#part 36
let rec destutter list =
    match list with
    | [] -> []
    | [hd] -> [hd]
    | hd1 :: hd2 :: tl ->
      if hd1 = hd2 then destutter (hd2 :: tl)
      else hd1 :: destutter (hd2 :: tl)
  ;;
destutter ["hey";"hey";"hey";"man!"];;
#part 37
let divide x y =
    if y = 0 then None else Some (x/y) ;;
#part 38
let log_entry maybe_time message =
    let time =
      match maybe_time with
      | Some x -> x
      | None -> Time.now ()
    in
    Time.to_sec_string time (Time.Zone.of_string "UTC") ^ " -- " ^ message
  ;;
log_entry (Some Time.epoch) "A long long time ago";;
log_entry None "Up to the minute";;
#part 39
let x = 7 in
  x + x
  ;;
#part 40
let x = 7 in
  let y = x * x in
  x + y
  ;;
#part 41
type point2d = { x : float; y : float };;
#part 42
let p = { x = 3.; y = -4. };;
#part 43
let magnitude { x = x_pos; y = y_pos } =
    sqrt (x_pos ** 2. +. y_pos ** 2.);;
#part 44
let magnitude { x; y } = sqrt (x ** 2. +. y ** 2.);;
#part 45
let distance v1 v2 =
     magnitude { x = v1.x -. v2.x; y = v1.y -. v2.y };;
#part 46
type circle_desc  = { center: point2d; radius: float }
  type rect_desc    = { lower_left: point2d; width: float; height: float }
  type segment_desc = { endpoint1: point2d; endpoint2: point2d } ;;
#part 47
type scene_element =
    | Circle  of circle_desc
    | Rect    of rect_desc
    | Segment of segment_desc
  ;;
#part 48
let is_inside_scene_element point scene_element =
     match scene_element with
     | Circle { center; radius } ->
       distance center point < radius
     | Rect { lower_left; width; height } ->
       point.x    > lower_left.x && point.x < lower_left.x +. width
       && point.y > lower_left.y && point.y < lower_left.y +. height
     | Segment { endpoint1; endpoint2 } -> false
  ;;
let is_inside_scene point scene =
     List.exists scene
       ~f:(fun el -> is_inside_scene_element point el)
   ;;
is_inside_scene {x=3.;y=7.}
    [ Circle {center = {x=4.;y= 4.}; radius = 0.5 } ];;
is_inside_scene {x=3.;y=7.}
    [ Circle {center = {x=4.;y= 4.}; radius = 5.0 } ];;
#part 49
let numbers = [| 1; 2; 3; 4 |];;
numbers.(2) <- 4;;
numbers;;
#part 50
type running_sum =
   { mutable sum: float;
     mutable sum_sq: float; (* sum of squares *)
     mutable samples: int;
   }
  ;;
#part 51
let mean rsum = rsum.sum /. float rsum.samples
  let stdev rsum =
     sqrt (rsum.sum_sq /. float rsum.samples
           -. (rsum.sum /. float rsum.samples) ** 2.) ;;
#part 52
let create () = { sum = 0.; sum_sq = 0.; samples = 0 }
  let update rsum x =
     rsum.samples <- rsum.samples + 1;
     rsum.sum     <- rsum.sum     +. x;
     rsum.sum_sq  <- rsum.sum_sq  +. x *. x
  ;;
#part 53
let rsum = create ();;
List.iter [1.;3.;2.;-7.;4.;5.] ~f:(fun x -> update rsum x);;
mean rsum;;
stdev rsum;;
#part 54
let x = { contents = 0 };;
x.contents <- x.contents + 1;;
x;;
#part 55
let x = ref 0  (* create a ref, i.e., { contents = 0 } *) ;;
!x             (* get the contents of a ref, i.e., x.contents *) ;;
x := !x + 1    (* assignment, i.e., x.contents <- ... *) ;;
!x ;;
#part 56
type 'a ref = { mutable contents : 'a }

  let ref x = { contents = x }
  let (!) r = r.contents
  let (:=) r x = r.contents <- x
  ;;
#part 57
let sum list =
    let sum = ref 0 in
    List.iter list ~f:(fun x -> sum := !sum + x);
    !sum
  ;;
#part 58
let permute array =
    let length = Array.length array in
    for i = 0 to length - 2 do
       (* pick a j that is after i and before the end of the array *)
       let j = i + 1 + Random.int (length - i - 1) in
       (* Swap i and j *)
       let tmp = array.(i) in
       array.(i) <- array.(j);
       array.(j) <- tmp
    done
  ;;
#part 59
let ar = Array.init 20 ~f:(fun i -> i);;
permute ar;;
ar;;
#part 60
let find_first_negative_entry array =
     let pos = ref 0 in
     while !pos < Array.length array && array.(!pos) >= 0 do
       pos := !pos + 1
     done;
     if !pos = Array.length array then None else Some !pos
  ;;
find_first_negative_entry [|1;2;0;3|];;
find_first_negative_entry [|1;-2;0;3|];;
#part 61
let find_first_negative_entry array =
     let pos = ref 0 in
     while
       let pos_is_good = !pos < Array.length array in
       let element_is_non_negative = array.(!pos) >= 0 in
       pos_is_good && element_is_non_negative
     do
       pos := !pos + 1
     done;
     if !pos = Array.length array then None else Some !pos
  ;;
find_first_negative_entry [|1;2;0;3|];;
#part 62
#part 63

